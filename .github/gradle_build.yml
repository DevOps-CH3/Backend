#
name: Java CI Gradle build and test #nom du script, nom qui sera affiché dans les github actions

on: #a quel moment va-t-on déclencher l'action (au moment d'un push pour nous)
  push:
    branches: #uniquement quand on push dans main ou develop
      - main
      - develop
  pull_request: #type de push ou on a besoin de la validation du proprio du projet (utilisé dans l'open source)
    branches:
      - main
jobs: #ce qui va être lancé
  build:
    #on précise quel est le serveur distant sur lequel on va le lancer
    runs-on: ubuntu-latest #c notre os distant
    permissions:
      contents: read #il a juste le droit de récupérer et exécuter notre code

    # Get source code and config java
    #Le JDK sert à build ; on met le JDK sur la machinne ubuntu ; ainsi que gradle
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    #Tout ce qui était avant c'était du setup ; là les prochaines tâches du workflow, on va les définir:
    # Build project
    - name: Build with Gradle Wrapper
      run: ./gradlew build #w pour wrapper ; voir ce que c'est

    # Test project
    - name: Run tests
      run: ./gradlew test

    #On va maintenant ajouter un badge ; pour dire que notre projet il passe
    #artefact : application compilée (.jar ou .exe)
